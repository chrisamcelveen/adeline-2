(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Empyre.Services || (Empyre.Services = {});

  Empyre.Services.Inform = (function() {
    var ContextualInform, ContextualInformsByNameMap, Inform, globalInform, logHandler, merge, moduleId;
    moduleId = 'Inform';
    Inform = {};
    ContextualInformsByNameMap = {};
    logHandler = void 0;
    Inform.DEBUG = {
      value: 1,
      name: 'DEBUG'
    };
    Inform.INFO = {
      value: 2,
      name: 'INFO'
    };
    Inform.WARN = {
      value: 4,
      name: 'WARN'
    };
    Inform.ERROR = {
      value: 8,
      name: 'ERROR'
    };
    Inform.OFF = {
      value: 99,
      name: 'OFF'
    };
    merge = function() {
      var args, i, key, target;
      args = arguments;
      target = args[0];
      key = void 0;
      i = void 0;
      i = 1;
      while (i < args.length) {
        for (key in args[i]) {
          if ((!(key in target)) && args[i].hasOwnProperty(key)) {
            target[key] = args[i][key];
          }
        }
        i++;
      }
      return target;
    };
    ContextualInform = (function() {
      function ContextualInform(defaultContext) {
        this.invoke = __bind(this.invoke, this);
        this.error = __bind(this.error, this);
        this.warn = __bind(this.warn, this);
        this.info = __bind(this.info, this);
        this.debug = __bind(this.debug, this);
        this.enabledFor = __bind(this.enabledFor, this);
        this.setLevel = __bind(this.setLevel, this);
        this.context = defaultContext;
        this.setLevel(defaultContext.filterLevel);
        this.log = this.info;
      }

      ContextualInform.prototype.setLevel = function(newLevel) {
        if (newLevel && 'value' in newLevel) {
          return this.context.filterLevel = newLevel;
        }
      };

      ContextualInform.prototype.enabledFor = function(level) {
        var filterLevel;
        filterLevel = this.context.filterLevel;
        return level.value >= filterLevel.value;
      };

      ContextualInform.prototype.debug = function() {
        return this.invoke(Inform.DEBUG, arguments);
      };

      ContextualInform.prototype.info = function() {
        return this.invoke(Inform.INFO, arguments);
      };

      ContextualInform.prototype.warn = function() {
        return this.invoke(Inform.WARN, arguments);
      };

      ContextualInform.prototype.error = function() {
        return this.invoke(Inform.ERROR, arguments);
      };

      ContextualInform.prototype.invoke = function(level, msgArgs) {
        if (logHandler && this.enabledFor(level)) {
          return logHandler(msgArgs, merge({
            level: level
          }, this.context));
        }
      };

      return ContextualInform;

    })();
    globalInform = new ContextualInform({
      filterLevel: Inform.OFF
    });
    Inform.enabledFor = globalInform.enabledFor.bind(globalInform);
    Inform.debug = globalInform.debug.bind(globalInform);
    Inform.info = globalInform.info.bind(globalInform);
    Inform.warn = globalInform.warn.bind(globalInform);
    Inform.error = globalInform.error.bind(globalInform);
    Inform.log = Inform.info;
    Inform.setHandler = function(func) {
      return logHandler = func;
    };
    Inform.setLevel = function(level) {
      var key, _results;
      globalInform.setLevel(level);
      _results = [];
      for (key in ContextualInformsByNameMap) {
        if (ContextualInformsByNameMap.hasOwnProperty(key)) {
          _results.push(ContextualInformsByNameMap[key].setLevel(level));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    Inform.get = function(name) {
      return ContextualInformsByNameMap[name] || (ContextualInformsByNameMap[name] = new ContextualInform(merge({
        name: name
      }, globalInform.context)));
    };
    Inform.useDefaults = function(defaultLevel) {
      if (!('console' in window)) {
        return;
      }
      if (Empyre.Theme.config.debugMode !== true) {
        return;
      }
      Inform.setLevel(defaultLevel || Inform.DEBUG);
      return Inform.setHandler(function(messages, context) {
        var console, hdlr, messagePrefix;
        console = window.console;
        hdlr = console.log;
        messagePrefix = '[Empyre]';
        if (context.name) {
          messagePrefix += '[' + context.name + ']';
        }
        messagePrefix += ' ';
        if (context.level === Inform.DEBUG && console.debug) {
          console.debug(messagePrefix);
          hdlr = console.debug;
        } else {
          messages[0] = messagePrefix + messages[0];
          if (context.level === Inform.WARN && console.warn) {
            hdlr = console.warn;
          } else if (context.level === Inform.ERROR && console.error) {
            hdlr = console.error;
          } else if (context.level === Inform.INFO && console.info) {
            hdlr = console.info;
          }
        }
        return hdlr.apply(console, messages);
      });
    };
    Inform.useDefaults();
    return Inform;
  })();

}).call(this);

(function() {
  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.Notify = (function($) {
    var $nb, error, hide, log, moduleId, nbTimeout, notice, pauseDuration, show, success, transitionSpeed, warning;
    moduleId = 'Notify';
    log = Empyre.Services.Inform.get(moduleId);
    nbTimeout = '';
    pauseDuration = 6000;
    transitionSpeed = 500;
    $nb = {};
    hide = function() {
      var height;
      height = $nb.outerHeight();
      return $nb.transition({
        y: -(height + 1)
      }, transitionSpeed, 'easeInOutQuint', function() {
        clearTimeout(nbTimeout);
        return $nb.hide();
      });
    };
    show = function(message, type, duration) {
      type || (type = 'notice');
      duration || (duration = pauseDuration);
      clearTimeout(nbTimeout);
      $nb.hide();
      $nb.find('.message').html(message);
      $nb.transition({
        y: -$nb.outerHeight()
      }, 0);
      $nb.removeClass().addClass(type).show();
      $nb.transition({
        y: 0
      }, transitionSpeed, 'easeInOutQuint', function() {});
      return nbTimeout = setTimeout(hide, duration);
    };
    notice = function(message, duration) {
      return show(message, 'notice', duration);
    };
    success = function(message, duration) {
      return show(message, 'success', duration);
    };
    warning = function(message, duration) {
      return show(message, 'warning', duration);
    };
    error = function(message, duration) {
      return show(message, 'error', duration);
    };
    $(document).ready(function() {
      $nb = $('#notify-bar');
      return $nb.find('a.close').on('click', function() {
        return hide();
      });
    });
    return {
      notice: notice,
      success: success,
      warning: warning,
      error: error,
      hide: hide
    };
  })(jQuery.noConflict());

}).call(this);

(function() {
  (function($) {
    if (typeof Countries === 'object') {
      return Countries.updateProvinceLabel = function(country, $provinceLabel) {
        if (typeof country === 'string' && Countries[country] && Countries[country].provinces) {
          if (typeof $provinceLabel !== 'object') {
            $provinceLabel = $('label[for="sc-address-province"]');
            if ($provinceLabel === null) {
              return;
            }
          }
          return $provinceLabel.html(Countries[country].label);
        }
      };
    }
  })(jQuery.noConflict());

}).call(this);

(function() {
  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.Currency = (function($) {
    var $currencySelects, convertAmount, currencyFormat, extractAmount, formatCurrency, inform, init, initCurrency, initCurrencySelects, moduleId, prices, setCurrency, shop;
    moduleId = 'Currency';
    inform = Empyre.Services.Inform.get(moduleId);
    shop = Empyre.Theme.shop;
    currencyFormat = 'money_format';
    prices = '.price:not([data-disable-conversion])';
    $currencySelects = {};
    extractAmount = function(string) {
      return String(parseInt(String(string).replace(/[^0-9]/g, ''), 10));
    };
    convertAmount = function(amount, from, to, format) {
      var amt, extractedAmount, fromFormat, toFormat;
      format || (format = currencyFormat);
      extractedAmount = extractAmount(amount);
      fromFormat = Currency[format][from] || '{{amount}}';
      toFormat = Currency[format][to] || '{{amount}}';
      if (fromFormat.indexOf('amount_no_decimals') !== -1) {
        amt = extractedAmount * 100;
      } else if (from === 'JOD' || from === 'KWD' || from === 'BHD') {
        amt = extractedAmount / 100;
      } else {
        amt = extractedAmount;
      }
      return Currency.formatMoney(Currency.convert(amt, from, to), toFormat);
    };
    initCurrencySelects = function() {
      return $currencySelects.val(Currency.currentCurrency).change(function() {
        return setCurrency($(this).val());
      });
    };
    initCurrency = function() {
      if (shop.cookieCurrency == null) {
        if (shop.defaultCurrency !== shop.currency) {
          return setCurrency(shop.defaultCurrency);
        } else {
          return Currency.currentCurrency = shop.currency;
        }
      } else {
        if ($currencySelects.length && $currencySelects.find('option[value=' + shop.cookieCurrency + ']').length === 0) {
          return Currency.cookie.write(shop.currency);
        } else if (shop.cookieCurrency !== shop.currency) {
          return setCurrency(shop.cookieCurrency);
        }
      }
    };
    formatCurrency = function(amount, format) {
      format || (format = currencyFormat);
      if (Currency.currentCurrency === shop.currency) {
        return Currency.formatMoney(amount, Currency[format][Currency.currentCurrency]);
      } else {
        return convertAmount(amount, shop.currency, Currency.currentCurrency, format);
      }
    };
    setCurrency = function(toCurrency) {
      $(prices).each(function() {
        var currentAmount, fromCurrency;
        currentAmount = $(this).html();
        fromCurrency = Currency.currentCurrency;
        if ($(this).attr('data-money-with-currency') != null) {
          return $(this).html(convertAmount(currentAmount, fromCurrency, toCurrency, 'money_with_currency_format'));
        } else {
          return $(this).html(convertAmount(currentAmount, fromCurrency, toCurrency));
        }
      });
      $('.currency:not([data-disable-conversion])').html(toCurrency);
      $currencySelects.val(toCurrency);
      Currency.currentCurrency = toCurrency;
      Currency.cookie.write(toCurrency);
      return inform.log('Currency set to ' + toCurrency);
    };
    init = (function() {
      Currency.currentCurrency = shop.currency;
      Currency.format = currencyFormat;
      Currency.money_format[shop.currency] = shop.moneyFormat;
      Currency.money_with_currency_format[shop.currency] = shop.moneyWithCurrencyFormat;
      return shop.cookieCurrency = Currency.cookie.read();
    })();
    $(document).ready(function() {
      $currencySelects = $('[name=currency-select]');
      initCurrency();
      return initCurrencySelects();
    });
    return {
      convertAmount: convertAmount,
      extractAmount: extractAmount,
      formatCurrency: formatCurrency,
      setCurrency: setCurrency
    };
  })(jQuery.noConflict());

}).call(this);

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.Collections = (function($) {
    var $collectionTags, collection, displayRandomProducts, indexProductsLimit, inform, initCollectionTagFilter, moduleId, notify;
    moduleId = 'Collections';
    inform = Empyre.Services.Inform.get(moduleId);
    notify = Empyre.Theme.Notify;
    collection = Empyre.Theme.current.collection;
    indexProductsLimit = Empyre.Theme.config.indexProductsLimit;
    $collectionTags = {};
    displayRandomProducts = function(products, limit) {
      var product, randomProducts, _i, _len, _ref;
      limit || (limit = indexProductsLimit);
      if ($(products).length > 0) {
        randomProducts = $(products).get().sort(function() {
          return Math.round(Math.random()) - 0.5;
        }).slice(0, limit);
        _ref = $(products);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          product = _ref[_i];
          if (__indexOf.call(randomProducts, product) < 0) {
            $(product).remove();
          }
        }
        return $(products).show();
      }
    };
    initCollectionTagFilter = function() {
      return $collectionTags.on('change', function() {
        var filterURL, tag;
        tag = $(this).val();
        filterURL = '/collections/all/' + tag;
        if (collection) {
          if (collection.handle) {
            if (tag === '') {
              filterURL = '/collections/' + collection.handle;
            } else {
              filterURL = '/collections/' + collection.handle + '/' + tag;
            }
          }
        }
        return window.location.href = filterURL;
      });
    };
    $(document).ready(function() {
      if ($('body.collection').length) {
        $collectionTags = $('.collection-tags');
        $('.products .product').click(function() {
          return window.location.href = $(this).find('.hproduct').attr('data-url');
        });
        initCollectionTagFilter();
      }
      return displayRandomProducts('body.index .products[data-order=random] li');
    });
    return {
      displayRandomProducts: displayRandomProducts
    };
  })(jQuery.noConflict());

}).call(this);

(function() {
  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.AjaxCart = (function($) {
    var addToCartWaitMessage, ajaxToCart, dictionary, formatCurrency, formatLineItem, inform, lineItemAddedConfirmationMessage, lineItemMultipleVariantsMessage, moduleId, notify, renderLineItem, renderLineItems, updateCartTotals, updateCartWidget;
    moduleId = 'AjaxCart';
    inform = Empyre.Services.Inform.get(moduleId);
    notify = Empyre.Theme.Notify;
    dictionary = Empyre.Theme.dictionary;
    formatCurrency = Empyre.Theme.Currency.formatCurrency;
    addToCartWaitMessage = 'Adding&hellip;';
    ajaxToCart = function(serializedForm, trigger) {
      var $product, $trigger, addToCart, errorMessage, hasMultipleVariants, hasVariantSelector, isProductPage, itemName, itemPath, serializedFormObj, triggerVal, variantCount, variantQty;
      $trigger = $(trigger);
      $product = $(trigger).closest('.hproduct');
      triggerVal = $trigger.html();
      isProductPage = false;
      hasMultipleVariants = false;
      hasVariantSelector = false;
      if ($product.hasClass('single')) {
        isProductPage = true;
      }
      variantCount = $product.attr('data-variant-count');
      if (typeof variantCount !== 'undefined' && variantCount !== false && parseInt(variantCount, 10) > 1) {
        hasMultipleVariants = true;
      }
      if ($(trigger).closest('.hproduct').has('.option-selector').length) {
        hasVariantSelector = true;
      }
      if (isProductPage === true || (isProductPage === false && hasVariantSelector === true) || (isProductPage === false && hasMultipleVariants === false && hasVariantSelector === false)) {
        addToCart = true;
      }
      if (addToCart) {
        inform.log('Adding item to cart');
        serializedFormObj = {};
        variantQty = 1;
        $trigger.html(addToCartWaitMessage);
        $(serializedForm).each(function(i, field) {
          return serializedFormObj[field.name] = field.value;
        });
        if (serializedFormObj.hasOwnProperty('quantity')) {
          variantQty = serializedFormObj['quantity'];
        }
        return $.ajax({
          type: 'POST',
          url: '/cart/add.js',
          data: serializedForm,
          dataType: 'json',
          success: function(item) {
            var formattedItem;
            inform.log(item.title + ' ' + item.variant + ' ' + 'added to cart');
            updateCartTotals();
            $trigger.html(triggerVal);
            item.quantity_added = variantQty;
            item.price_added = formatCurrency(parseInt(variantQty, 10) * parseInt(item.price, 10));
            formattedItem = formatLineItem(item);
            updateCartWidget(formattedItem);
            return notify.success(lineItemAddedConfirmationMessage(formattedItem));
          },
          error: function(XMLHttpRequest, textStatus) {
            Empyre.Theme.Base.onAjaxError(XMLHttpRequest, textStatus, true, dictionary.cart.addItemError);
            return $(trigger).html(triggerVal);
          }
        });
      } else {
        itemName = $product.find('header .name').first().text();
        itemPath = $product.find('header a').first().attr('href');
        if (hasMultipleVariants) {
          inform.log(itemName + ' has multiple variants and was not added to the cart');
          return notify.notice(lineItemMultipleVariantsMessage(itemName, itemPath));
        } else {
          inform.log(itemName + ' not added to the cart');
          errorMessage = dictionary.cart.addItemError;
          errorMessage = errorMessage.replace('[productTitle]', itemName);
          return notify.error();
        }
      }
    };
    formatLineItem = function(item) {
      var k, keyedProperty, titleArr, v, _ref;
      titleArr = item.title.split(' - ');
      item.title = titleArr[0];
      item.variant = titleArr[1];
      if (item.properties != null) {
        item.properties.keyedProperties = [];
        _ref = item.properties;
        for (k in _ref) {
          v = _ref[k];
          if (typeof v === 'string') {
            if (parseInt(v.indexOf('/uploads/'), 10) > 0) {
              v = '<a class="fancybox" href="' + v + '">' + v.slice(v.lastIndexOf('/') + 1, v.length) + '</a>';
            }
            keyedProperty = {
              property: k,
              value: v
            };
            if (v) {
              item.properties.keyedProperties.push(keyedProperty);
            }
          }
        }
      }
      item.price = formatCurrency(item.price);
      item.line_price = formatCurrency(item.line_price);
      return item;
    };
    lineItemAddedConfirmationMessage = function(item) {
      var message;
      message = dictionary.cart.addItemSuccess;
      message = message.replace('[productTitle]', item.title);
      message = message.replace('[quantityAdded]', item.quantity_added);
      if (item.variant) {
        message = message.replace('[productVariant]', item.variant);
      } else {
        message = message.replace('[productVariant]', '');
      }
      return message;
    };
    lineItemMultipleVariantsMessage = function(name, url) {
      var message;
      message = dictionary.cart.addItemVariants;
      message = message.replace('[productTitle]', name);
      message = message.replace('[productURL]', url);
      return message;
    };
    renderLineItem = function(item, position, templateSelector, wrapperSelector) {
      var output;
      if ($(templateSelector).length && $(wrapperSelector).length) {
        output = Mustache.render($(templateSelector).html(), item);
        switch (position) {
          case 'prepend':
            return $(wrapperSelector).prepend(output);
          case 'append':
            return $(wrapperSelector).append(output);
          default:
            return $(wrapperSelector).html(output);
        }
      }
    };
    renderLineItems = function(items, position, templateSelector, wrapperSelector) {
      var item, _i, _len, _results;
      if ($(wrapperSelector).length) {
        $(wrapperSelector).html('');
      }
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        _results.push(renderLineItem(item, position, templateSelector, wrapperSelector));
      }
      return _results;
    };
    updateCartTotals = function() {
      inform.log('Updating cart totals');
      return $.ajax({
        type: 'GET',
        url: '/cart.js',
        dataType: 'json',
        success: function(cartData) {
          inform.log('Cart totals updated');
          $('.cart .totals .count').html(cartData.item_count);
          return $('.cart .totals .price').html(formatCurrency(cartData.total_price));
        },
        error: function(XMLHttpRequest, textStatus) {
          return Empyre.Theme.Base.onAjaxError(XMLHttpRequest, textStatus, false);
        }
      });
    };
    updateCartWidget = function(item) {
      inform.log('Updating cart widget');
      if ($('.widget-cart-line-items').length) {
        return Empyre.Theme.Widgets.Cart.addItem(item);
      }
    };
    $(document).ready(function() {
      if (Empyre.Theme.config.ajaxCartEnabled === true) {
        return $('.add-to-cart').each(function() {
          var $itemForm;
          $itemForm = $(this).closest('form');
          return $(this).on('click', function(e) {
            var serializedForm;
            serializedForm = $itemForm.serializeArray();
            ajaxToCart(serializedForm, this);
            $(this).blur();
            return false;
          });
        });
      }
    });
    return {
      renderLineItem: renderLineItem,
      renderLineItems: renderLineItems
    };
  })(jQuery.noConflict());

}).call(this);

(function() {
  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.CustomerAccounts = (function($) {
    var inform, initShopifyProvinceSelectors, moduleId, notify, showLoginForm, showRecoverPasswordForm;
    moduleId = 'CustomerAccounts';
    inform = Empyre.Services.Inform.get(moduleId);
    notify = Empyre.Theme.Notify;
    initShopifyProvinceSelectors = function() {
      if ($('body#addresses').length) {
        new Shopify.CountryProvinceSelector('address_country_new', 'address_province_new', {
          hideElement: 'address_province_container_new'
        });
        return $('.address').not('#add_address').each(function() {
          var id, idFull;
          idFull = $(this).attr('id');
          id = idFull.replace('address_', '');
          return new Shopify.CountryProvinceSelector('address_country_' + id, 'address_province_' + id, {
            hideElement: 'address_province_container_' + id
          });
        });
      }
    };
    showLoginForm = function() {
      $('#customer-recover-password').hide();
      return $('#customer-login').fadeIn();
    };
    showRecoverPasswordForm = function() {
      $('#customer-login').hide();
      return $('#customer-recover-password').fadeIn();
    };
    $(document).ready(function() {
      if ($('body.customers').length) {
        initShopifyProvinceSelectors();
        showLoginForm();
        if (window.location.hash === '#recover') {
          showRecoverPasswordForm();
        }
        $('#account a#reset-password').click(function(e) {
          e.preventDefault();
          return showRecoverPasswordForm();
        });
        $('#account a#reset-password-cancel').click(function(e) {
          e.preventDefault();
          return showLoginForm();
        });
        return $('#addresses .action-add').click(function(e) {
          e.preventDefault();
          return Shopify.CustomerAddress.toggleNewForm();
        });
      }
    });
    return {
      showLoginForm: showLoginForm,
      showRecoverPasswordForm: showRecoverPasswordForm
    };
  })(jQuery.noConflict());

}).call(this);

(function() {
  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.Images = (function($) {
    var getBaseURL, inform, moduleId, notify, singleProduct;
    moduleId = 'Images';
    inform = Empyre.Services.Inform.get(moduleId);
    notify = Empyre.Theme.Notify;
    getBaseURL = function(imageURL) {
      var size;
      size = Shopify.Image.imageSize(imageURL);
      if (size) {
        imageURL = imageURL.replace('_' + size, '');
      }
      imageURL = imageURL.replace('_.' + '.');
      imageURL = imageURL.replace('https:', "");
      imageURL = imageURL.replace('http:', "");
      return imageURL;
    };
    singleProduct = (function() {
      var $primaryImage, $primaryImageLink, $primaryImageWrap, $secondaryImages, $secondaryImagesLinks, $secondaryImagesWrap, initPrimaryImage, initPrimaryImageZoom, initSecondaryImages, primaryImageSelector, primaryImageWrapSelector, secondaryImageSelector, secondaryImagesWrapSelector, setPrimaryImage;
      primaryImageWrapSelector = '.product .primary-image-wrap';
      secondaryImagesWrapSelector = '.product .secondary-image-wrap';
      primaryImageSelector = '.product .primary-image';
      secondaryImageSelector = '.product .secondary-image';
      $primaryImageWrap = {};
      $primaryImageLink = {};
      $primaryImage = {};
      $secondaryImagesWrap = {};
      $secondaryImagesLinks = {};
      $secondaryImages = {};
      initPrimaryImageZoom = function() {
        if (Empyre.Theme.config.productFIZoomEnabled) {
          $primaryImageWrap.find('.zoomImg').remove();
          return $primaryImageLink.zoom({
            url: $primaryImageLink.attr('href')
          });
        }
      };
      initPrimaryImage = function() {
        initPrimaryImageZoom();
        return $primaryImageLink.on('click', function(e) {
          var imageIndex;
          e.preventDefault();
          inform.log('Product featured image link clicked');
          imageIndex = $primaryImage.attr('data-image-index') - 1;
          return $secondaryImagesLinks.eq(imageIndex).trigger('click');
        });
      };
      initSecondaryImages = function() {
        return $secondaryImagesLinks.each(function() {
          return $(this).hover(function() {
            return $(this).toggleClass('hover').toggleClass('not-fancy');
          }).on('click', function(e) {
            var image;
            e.preventDefault();
            inform.log('Secondary image link clicked');
            if (Empyre.Theme.config.productSetVariantFromSecondary === true) {
              return Empyre.Theme.Products.setVariantFromImageURL($(this).attr('href'));
            } else {
              image = {
                src: $(this).attr('href')
              };
              return setPrimaryImage(image);
            }
          });
        });
      };
      setPrimaryImage = function(image) {
        var $secondaryImageForVariant, i, secondaryImage, _i, _len;
        if (image) {
          inform.log('Setting primary image using provided image object');
        } else {
          inform.log('Setting primary image using default featured image');
          image = {
            src: Empyre.Theme.current.product.featured_image
          };
        }
        for (i = _i = 0, _len = $secondaryImages.length; _i < _len; i = ++_i) {
          secondaryImage = $secondaryImages[i];
          if (getBaseURL(secondaryImage.src) === getBaseURL(image.src)) {
            $secondaryImageForVariant = $($secondaryImages[i]).first();
            break;
          }
        }
        $primaryImageWrap.children('.loading').first().show();
        return Shopify.Image.switchImage(image, $primaryImage[0], function(newImageSRC, originalImage, element) {
          var alt, imageIndex;
          if ($secondaryImageForVariant) {
            alt = $secondaryImageForVariant.attr('alt');
            imageIndex = $secondaryImageForVariant.attr('data-image-index');
          } else {
            alt = Empyre.Theme.current.product.title;
            imageIndex = 1;
          }
          $primaryImageLink.attr('href', newImageSRC);
          $primaryImage.attr('src', newImageSRC);
          $primaryImage.attr('alt', alt);
          $primaryImage.attr('data-image-index', imageIndex);
          initPrimaryImageZoom();
          return $primaryImageWrap.children('.loading').first().hide();
        });
      };
      $(document).ready(function() {
        $primaryImageWrap = $(primaryImageWrapSelector);
        $primaryImageLink = $primaryImageWrap.children('a');
        $primaryImage = $(primaryImageSelector).first();
        $secondaryImagesWrap = $(secondaryImagesWrapSelector);
        $secondaryImagesLinks = $secondaryImagesWrap.find('li>a');
        $secondaryImages = $(secondaryImageSelector);
        initPrimaryImage();
        return initSecondaryImages();
      });
      return {
        setPrimaryImage: setPrimaryImage
      };
    })();
    $(document).ready(function() {});
    return {
      getBaseURL: getBaseURL,
      singleProduct: singleProduct
    };
  })(jQuery.noConflict());

}).call(this);

(function() {
  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.OrderNote = (function($) {
    var $noteInput, $notePreview, $noteRemove, $noteToggle, $noteWrap, dictionary, editNote, inEditMode, inform, moduleId, noteExists, notify, saveNote, setNotePreview, setToggleText, toggleBtnAddText, toggleBtnEditText, toggleBtnSaveText;
    moduleId = 'OrderNote';
    inform = Empyre.Services.Inform.get(moduleId);
    notify = Empyre.Theme.Notify;
    dictionary = Empyre.Theme.dictionary;
    toggleBtnAddText = dictionary.orderNotes.add;
    toggleBtnEditText = dictionary.orderNotes.edit;
    toggleBtnSaveText = dictionary.orderNotes.save;
    $noteInput = {};
    $notePreview = {};
    $noteRemove = {};
    $noteToggle = {};
    $noteWrap = {};
    editNote = function() {
      $notePreview.hide();
      $noteInput.show();
      return $noteRemove.show();
    };
    inEditMode = function() {
      var _ref;
      return (_ref = $noteInput.is(':visible')) != null ? _ref : {
        "true": false
      };
    };
    noteExists = function() {
      return $noteInput.val().length > 0;
    };
    saveNote = function() {
      $noteRemove.hide();
      $noteInput.hide();
      $notePreview.show();
      return setNotePreview();
    };
    setNotePreview = function() {
      return $notePreview.html($noteInput.val());
    };
    setToggleText = function() {
      var text;
      text = $noteToggle.text();
      if (text === toggleBtnAddText || text === toggleBtnEditText) {
        text = toggleBtnSaveText;
      } else {
        text = noteExists() ? toggleBtnEditText : toggleBtnAddText;
      }
      return $noteToggle.text(text);
    };
    $(document).ready(function() {
      $noteWrap = $('.note-wrap');
      $noteInput = $noteWrap.find('textarea.note');
      $notePreview = $noteWrap.find('.note-preview');
      $noteRemove = $noteWrap.find('.remove-note');
      $noteToggle = $noteWrap.find('.toggle-note');
      if ($noteWrap.length) {
        return $noteToggle.on('click', function(e) {
          e.preventDefault();
          if (inEditMode()) {
            saveNote($(this));
          } else {
            editNote($(this));
          }
          return setToggleText();
        });
      }
    });
    return {
      editNote: editNote,
      saveNote: saveNote
    };
  })(jQuery.noConflict());

}).call(this);

(function() {
  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.Products = (function($) {
    var $addButton, $backorderNotice, $price, $priceCompare, $priceWrap, $qtySelect, $selectorWrappers, addButtonText, clearDataCurrencyAttributes, currentProduct, disableAddButton, enableAddButton, formatCurrency, formatSelectorWrappers, getBaseImageURL, inform, initSelectors, isBackordered, moduleId, notify, setVariant, setVariantFromImageURL, shop, toggleBackorderNotice, unavailableMessage, updatePrice, updateQtySelect, variantQtySelectMax;
    moduleId = 'Products';
    inform = Empyre.Services.Inform.get(moduleId);
    notify = Empyre.Theme.Notify;
    shop = Empyre.Theme.shop;
    addButtonText = Empyre.Theme.dictionary.cart.addButton;
    formatCurrency = Empyre.Theme.Currency.formatCurrency;
    currentProduct = Empyre.Theme.current.product;
    variantQtySelectMax = Empyre.Theme.config.productQtySelectMax;
    getBaseImageURL = Empyre.Theme.Images.getBaseURL;
    $addButton = {};
    $backorderNotice = {};
    $priceWrap = {};
    $price = {};
    $priceCompare = {};
    $qtySelect = {};
    $selectorWrappers = {};
    clearDataCurrencyAttributes = function() {
      return $priceWrap.find('.price').each(function() {
        var $currentPrice, attributes;
        $currentPrice = $(this);
        attributes = $.map(this.attributes, function(item) {
          return item.name;
        });
        return $.each(attributes, function(i, item) {
          if (item.indexOf('data-currency') !== -1) {
            return $currentPrice.removeAttr(item);
          }
        });
      });
    };
    disableAddButton = function(text) {
      $addButton.text(text);
      return $addButton.addClass('disabled').attr('disabled', 'disabled');
    };
    enableAddButton = function() {
      $addButton.text(addButtonText);
      return $addButton.removeClass('disabled').removeAttr('disabled');
    };
    formatSelectorWrappers = function() {
      var label;
      $selectorWrappers.find('label').remove();
      $selectorWrappers.prev('label').remove();
      if (currentProduct.options.length > 1) {
        return $('label.placeholder').remove();
      } else {
        label = currentProduct.options[0] === 'Title' ? '&nbsp;' : currentProduct.options[0];
        return $('label.placeholder').html(label);
      }
    };
    initSelectors = function() {
      if (currentProduct.variants.length > 1 && $('.option-selector').not('.card .option-selector').length) {
        new Shopify.OptionSelectors('product-select', {
          product: currentProduct,
          onVariantSelected: setVariant,
          enableHistoryState: true
        });
      } else {
        setVariant(currentProduct.variants[0]);
      }
      return formatSelectorWrappers();
    };
    isBackordered = function(variant) {
      var qty;
      if (variant) {
        qty = variant.inventory_quantity;
        if (variant.inventory_management && variant.available && qty <= 0) {
          inform.log('Item on backorder');
          return true;
        } else {
          inform.log('Item not on backorder');
          return false;
        }
      } else {
        return inform.log('Variant not supplied');
      }
    };
    unavailableMessage = function(variant) {
      if (variant) {
        return 'Sold Out';
      } else {
        return 'Unavailable';
      }
    };
    toggleBackorderNotice = function(variant) {
      var $variantName;
      if (isBackordered(variant)) {
        $variantName = $backorderNotice.find('.variant-name');
        if (variant.title === 'Default Title') {
          $variantName.text(currentProduct.title);
        } else {
          $variantName.text(currentProduct.title + ' - ' + variant.title);
        }
        return $backorderNotice.show();
      } else {
        return $backorderNotice.hide();
      }
    };
    updatePrice = function(variant) {
      var compare_at_price, price;
      compare_at_price = null;
      price = 0;
      $price.removeAttr('data-disable-conversion');
      if (variant && variant.available) {
        price = formatCurrency(variant.price);
        if (variant.compare_at_price > variant.price) {
          compare_at_price = formatCurrency(variant.compare_at_price);
        }
      } else {
        price = unavailableMessage(variant);
        $price.attr('data-disable-conversion', '');
      }
      $priceWrap.find('.fa').remove();
      $price.html(price);
      clearDataCurrencyAttributes();
      $priceWrap.find('.compare').html('');
      $priceWrap.find('.compare').hide();
      if (compare_at_price != null) {
        return $priceCompare.html(compare_at_price).show();
      }
    };
    setVariant = function(variant) {
      inform.log('Setting variant');
      formatSelectorWrappers();
      updatePrice(variant);
      updateQtySelect(variant);
      toggleBackorderNotice(variant);
      if (variant && variant.available) {
        enableAddButton();
        return Empyre.Theme.Images.singleProduct.setPrimaryImage(variant.featured_image);
      } else {
        return disableAddButton(unavailableMessage(variant));
      }
    };
    setVariantFromImageURL = function(imageURL) {
      var image, variant, _i, _len, _ref, _results;
      inform.log('Setting variant from image URL');
      imageURL = getBaseImageURL(imageURL);
      _ref = currentProduct.variants;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        variant = _ref[_i];
        if (variant.featured_image) {
          if (getBaseImageURL(variant.featured_image.src) === imageURL) {
            inform.log('Variant match found: ' + variant.title);
            $('.single-option-selector[data-option="option1"]').val(variant.option1).trigger('change');
            break;
          } else {
            _results.push(void 0);
          }
        } else {
          inform.log('Variant match not found');
          image = {
            src: imageURL
          };
          _results.push(Empyre.Theme.Images.singleProduct.setPrimaryImage(image));
        }
      }
      return _results;
    };
    updateQtySelect = function(variant) {
      var i, im, iq, qtyMax;
      inform.log('Updating quantity select');
      $qtySelect.find('option').remove();
      if (variant) {
        iq = variant.inventory_quantity;
        im = variant.inventory_management;
        qtyMax = variantQtySelectMax;
        if (im === 'shopify' && iq > 0 && iq < variantQtySelectMax) {
          qtyMax = iq;
        }
        if (variant.available) {
          i = 1;
          while (i <= qtyMax) {
            $qtySelect.append('<option value="' + i + '">' + i + '</option>');
            i++;
          }
        } else {
          inform.log('Variant not available');
          $qtySelect.append('<option value="0">0</option>');
        }
      } else {
        inform.log('Variant not provided');
        $qtySelect.append('<option value="0">0</option>');
      }
      return $qtySelect.change();
    };
    $(document).ready(function() {
      if ($('body.product').length) {
        $addButton = $('button.add-to-cart:first');
        $backorderNotice = $('.backorder-notice');
        $priceWrap = $('.product .single .pricing');
        $price = $priceWrap.find('.price:not(.compare)');
        $priceCompare = $priceWrap.find('.price.compare');
        $qtySelect = $('select#quantity');
        $selectorWrappers = $('.selector-wrapper:eq(0)');
        return initSelectors();
      }
    });
    return {
      setVariantFromImageURL: setVariantFromImageURL
    };
  })(jQuery.noConflict());

}).call(this);

(function() {
  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.ShippingCalculator = (function($) {
    var $btnGetRates, $btnHideCalculator, $btnShowCalculator, $calculator, $calculatorWrap, $countrySelect, $provinceLabel, $provinceSelect, $responseTemplate, $responseWrapper, $zipSelect, btnGetRatesDisabledText, btnGetRatesEnabledText, dictionary, disableButtons, displayErrors, displayRates, enableButtons, formatAddress, formatCurrency, formatErrors, formatMessage, formatRates, getRates, hideCalculator, inform, init, moduleId, multipleRatesAvailableText, noRatesAvailableText, notify, onGetRatesError, onGetRatesSuccess, setAddress, setDefaultCountry, showCalculator, singleRateAvailableText, updateProvinceLabel;
    moduleId = 'ShippingCalculator';
    inform = Empyre.Services.Inform.get(moduleId);
    notify = Empyre.Theme.Notify;
    dictionary = Empyre.Theme.dictionary;
    formatCurrency = Empyre.Theme.Currency.formatCurrency;
    btnGetRatesDisabledText = dictionary.shippingCalculator.searching;
    btnGetRatesEnabledText = dictionary.shippingCalculator.getRates;
    multipleRatesAvailableText = dictionary.shippingCalculator.rates;
    singleRateAvailableText = dictionary.shippingCalculator.rate;
    noRatesAvailableText = dictionary.shippingCalculator.noRates;
    $btnGetRates = {};
    $btnHideCalculator = {};
    $btnShowCalculator = {};
    $calculator = {};
    $calculatorWrap = {};
    $countrySelect = {};
    $provinceLabel = {};
    $provinceSelect = {};
    $responseTemplate = {};
    $responseWrapper = {};
    $zipSelect = {};
    disableButtons = function() {
      return $btnGetRates.addClass('disabled').prop('disabled', true).html(btnGetRatesDisabledText);
    };
    displayErrors = function(XMLHttpRequest) {
      var output, response;
      if ($responseWrapper.length) {
        response = {};
        response.status = 'error';
        response.errors = formatErrors(XMLHttpRequest);
        output = Mustache.render($responseTemplate.html(), response);
        return $responseWrapper.html(output);
      }
    };
    displayRates = function(rates, formattedAddress) {
      var formattedMessage, formattedRates, output, response;
      if ($responseWrapper.length) {
        response = {};
        response.status = 'success';
        formattedRates = formatRates(rates);
        formattedMessage = formatMessage(rates, formattedAddress);
        response.rates = formattedRates;
        response.address = formattedAddress;
        response.message = formattedMessage;
        output = Mustache.render($responseTemplate.html(), response);
        return $responseWrapper.html(output);
      }
    };
    enableButtons = function() {
      return $btnGetRates.removeClass('disabled').prop('disabled', false).html(btnGetRatesEnabledText);
    };
    formatAddress = function(address) {
      var formattedAddress;
      formattedAddress = '';
      if (address.province) {
        formattedAddress += address.province + ', ';
      }
      formattedAddress += address.country;
      return formattedAddress;
    };
    formatErrors = function(XMLHttpRequest) {
      var errorResponse, errors;
      errorResponse = $.parseJSON(XMLHttpRequest.responseText);
      errors = [];
      $.each(errorResponse, function(attribute, messages) {
        var error;
        error = {
          attribute: attribute,
          messages: messages
        };
        $.each(error, function(i, attribute) {
          return error.attribute = error.attribute[0].toUpperCase() + error.attribute.substring(1);
        });
        $.each(error.messages, function(i, message) {
          message = message.replace('.', '');
          message += '.';
          if (message !== 'is not supported.') {
            return error.messages[i] = message;
          } else {
            return error.messages.splice(i, 1);
          }
        });
        return errors.push(error);
      });
      return errors;
    };
    formatRates = function(rates) {
      var rate, _i, _len;
      for (_i = 0, _len = rates.length; _i < _len; _i++) {
        rate = rates[_i];
        rate.price = formatCurrency(rate.price);
      }
      return rates;
    };
    formatMessage = function(rates, formattedAddress) {
      var message, ratesCount;
      ratesCount = rates.length;
      if (ratesCount > 1) {
        message = multipleRatesAvailableText;
      } else if (ratesCount === 1) {
        message = singleRateAvailableText;
      } else {
        message = noRatesAvailableText;
      }
      message = message.replace('[ratesCount]', ratesCount);
      return message = message.replace('[destination]', formattedAddress);
    };
    getRates = function() {
      var address;
      disableButtons();
      $responseWrapper.html('<i class="fa fa-spinner fa-spin fa-2x"></i>');
      address = setAddress();
      return $.ajax({
        type: 'GET',
        url: '/cart/shipping_rates.json',
        data: jQuery.param({
          'shipping_address': address
        }),
        dataType: 'json',
        success: function(response) {
          return onGetRatesSuccess(response.shipping_rates, address);
        },
        error: function(XMLHttpRequest, textStatus) {
          return onGetRatesError(XMLHttpRequest, textStatus);
        }
      });
    };
    hideCalculator = function() {
      $calculator.hide();
      return $btnShowCalculator.show();
    };
    onGetRatesError = function(XMLHttpRequest, textStatus) {
      Empyre.Theme.Base.onAjaxError(XMLHttpRequest, textStatus, false);
      enableButtons();
      return displayErrors(XMLHttpRequest);
    };
    onGetRatesSuccess = function(rates, address) {
      var formattedAddress;
      enableButtons();
      formattedAddress = formatAddress(address);
      return displayRates(rates, formattedAddress);
    };
    setAddress = function() {
      var address;
      address = {};
      address.country = $countrySelect.val();
      address.province = $provinceSelect.val();
      address.zip = $zipSelect.val();
      return address;
    };
    setDefaultCountry = function() {
      var country;
      country = $countrySelect.attr('data-default');
      if (country) {
        return $countrySelect.val(country).prop('selected', true);
      }
    };
    showCalculator = function() {
      $calculator.show();
      return $btnShowCalculator.hide();
    };
    updateProvinceLabel = function() {
      if (typeof Countries !== 'undefined') {
        return Countries.updateProvinceLabel($countrySelect.val(), $provinceLabel);
      }
    };
    init = function() {
      btnGetRatesEnabledText = $btnGetRates.html();
      new Shopify.CountryProvinceSelector('sc-address-country', 'sc-address-province', {
        hideElement: 'sc-address-province-container'
      });
      setDefaultCountry();
      updateProvinceLabel();
      $countrySelect.on('change', function() {
        return updateProvinceLabel();
      });
      $btnShowCalculator.on('click', function(e) {
        e.preventDefault();
        return showCalculator();
      });
      $btnHideCalculator.on('click', function(e) {
        e.preventDefault();
        return hideCalculator();
      });
      $btnGetRates.on('click', function(e) {
        e.preventDefault();
        return getRates();
      });
      if (Empyre.Theme.current.customerLoggedIn === true) {
        return $btnGetRates.trigger('click');
      }
    };
    $(document).ready(function() {
      $calculatorWrap = $('.shipping-calculator');
      $btnGetRates = $calculatorWrap.find('.get-rates');
      $btnHideCalculator = $calculatorWrap.find('.hide-calculator');
      $btnShowCalculator = $calculatorWrap.find('.show-calculator');
      $calculator = $calculatorWrap.find('.calculator');
      $countrySelect = $calculator.find('#sc-address-country');
      $provinceSelect = $calculator.find('#sc-address-province');
      $provinceLabel = $calculator.find('label[for="sc-address-province"]');
      $responseWrapper = $calculator.find('.response');
      $responseTemplate = $('#shipping-calculator-response-template');
      $zipSelect = $calculator.find('#sc-address-zip');
      if ($calculator.length) {
        return init();
      }
    });
    return {};
  })(jQuery.noConflict());

}).call(this);

(function() {
  var _base,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Empyre.Theme || (Empyre.Theme = {});

  (_base = Empyre.Theme).Widgets || (_base.Widgets = {});

  Empyre.Theme.Widgets.Cart = (function($) {
    var addItem, getItems, inform, lineItemTemplate, lineItemsWrapper, moduleId, notify;
    moduleId = 'CartWidget';
    inform = Empyre.Services.Inform.get(moduleId);
    notify = Empyre.Theme.Notify;
    lineItemTemplate = '#widget-cart-line-item-template';
    lineItemsWrapper = '.widget-cart-line-items';
    addItem = function(item) {
      var $existingItems, existingItemIDs, _ref;
      $existingItems = $(lineItemsWrapper + ' .line-item');
      existingItemIDs = [];
      $existingItems.each(function() {
        return existingItemIDs.push(parseInt($(this).attr('data-variant-id'), 10));
      });
      if ($('.widget-cart .empty').length) {
        $('.widget-cart .empty').remove();
      }
      if (_ref = item.id, __indexOf.call(existingItemIDs, _ref) >= 0) {
        return $(lineItemsWrapper + ' .line-item[data-variant-id="' + item.id + '"]').each(function() {
          if (!$(this).find('.line-item-property').length) {
            $(this).find('.quantity').html(item.quantity);
            $(this).find('.line-price').html(item.line_price);
            return false;
          }
        });
      } else {
        return Empyre.Theme.AjaxCart.renderLineItem(item, 'prepend', lineItemTemplate, lineItemsWrapper);
      }
    };
    getItems = function() {
      var params;
      params = {
        type: 'GET',
        url: '/cart.js',
        cache: false,
        dataType: 'json',
        success: function(response) {
          return Empyre.Theme.AjaxCart.renderLineItems(response.items, 'append', lineItemTemplate, lineItemsWrapper);
        },
        error: function(XMLHttpRequest, textStatus) {
          return Empyre.Theme.Base.onAjaxError(XMLHttpRequest, textStatus, false);
        }
      };
      return $.ajax(params);
    };
    return {
      addItem: addItem,
      getItems: getItems
    };
  })(jQuery.noConflict());

}).call(this);

(function() {
  Empyre.Theme || (Empyre.Theme = {});

  Empyre.Theme.Base = (function($) {
    var dictionary, inform, initCart, initFancybox, initFitVids, initMobileNav, initParsley, initSlides, initUtilities, moduleId, multicurrencyEnabled, notify, onAjaxError, positionSlidesControls, toggleSlidesControlsOpacity;
    moduleId = 'Base';
    inform = Empyre.Services.Inform.get(moduleId);
    notify = Empyre.Theme.Notify;
    dictionary = Empyre.Theme.dictionary;
    multicurrencyEnabled = Empyre.Theme.config.multicurrencyEnabled;
    initCart = function() {
      return $('.cart .remove-from-cart').click(function(e) {
        var $productWrap, confirmMessage, productName, productVariant;
        $productWrap = $(this).closest('.row');
        productName = $productWrap.find('.title').text();
        productVariant = $productWrap.find('.variant').text();
        confirmMessage = dictionary.cart.removeItem;
        confirmMessage = confirmMessage.replace('[productName]', productName);
        confirmMessage = confirmMessage.replace('[productVariant]', productVariant);
        confirmMessage = confirmMessage.replace('  ', ' ');
        if (!confirm(confirmMessage)) {
          return e.preventDefault();
        }
      });
    };
    initFitVids = function() {
      return $('body').fitVids();
    };
    initFancybox = function() {
      return $('.fancybox').fancybox({
        beforeLoad: function() {
          if (this.element.is('.not-fancy')) {
            return false;
          }
        },
        helpers: {
          overlay: {
            css: {
              background: 'rgba(255, 255, 255, 0.9)'
            }
          },
          title: null
        },
        tpl: {
          closeBtn: '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"><i class="fa fa-times"></i></a>',
          next: '<a href="#" class="fancybox-nav fancybox-next" href="javascript:;"><span><i class="fa fa-chevron-right"></i></span></a>',
          prev: '<a href="#" class="fancybox-nav fancybox-prev" href="javascript:;"><span><i class="fa fa-chevron-left"></i></span></a>'
        }
      });
    };
    initMobileNav = function() {
      $('.toggle-topbar a').click(function() {
        return $(this).find('i').hide().toggleClass('fa-bars fa-minus').fadeIn();
      });
      return $('.mobile-nav-select select').change(function() {
        return window.location = $(this).val();
      });
    };
    initParsley = function() {
      return $('form').each(function() {
        return $(this).parsley({
          animate: false
        });
      });
    };
    initSlides = function() {
      return $('.slides').each(function(i, slider) {
        var defaultHeight, isVideo, mode, slides, user_mode, _ref;
        isVideo = false;
        defaultHeight = $(slider).outerHeight();
        user_mode = $(slider).attr('data-transition');
        mode = (_ref = user_mode) != null ? _ref : {
          user_mode: 'vertical'
        };
        slides = $(slider).bxSlider({
          speed: parseInt($(slider).attr('data-transition-duration'), 10),
          pause: parseInt($(slider).attr('data-duration'), 10),
          mode: mode,
          preloadImages: 'visible',
          autoStart: $(slider).attr('data-autoplay') === 'true',
          auto: true,
          autoControls: true,
          autoControlsCombine: true,
          autoHover: true,
          easing: 'cubic-bezier(.48, .43, .07, 1)',
          startText: '<i class="fa fa-play"></i>',
          stopText: '<i class="fa fa-pause"></i>',
          nextText: '<i class="fa fa-chevron-right"></i>',
          prevText: '<i class="fa fa-chevron-left"></i>',
          adaptiveHeight: true,
          adaptiveHeightSpeed: 400,
          slideMargin: -1,
          video: true,
          onSliderLoad: function() {
            $(slider).closest('.bx-viewport').height(defaultHeight).transition({
              height: $(slider).find('li:not(.bx-clone)').first().outerHeight()
            }, 600, 'easeOutQuint', function() {
              $(slider).find('li').transition({
                opacity: 1
              }, {
                duration: 400,
                queue: false
              });
              return $(slider).closest('.bx-wrapper').find('.bx-controls').transition({
                opacity: 1
              }, {
                duration: 200,
                queue: false
              });
            });
            return isVideo = positionSlidesControls(slider, $(slider).find('li:not(.bx-clone)').first());
          },
          onSlideBefore: function($slideElement, oldIndex, newIndex) {
            return isVideo = positionSlidesControls(slider, $slideElement);
          }
        });
        return $(slider).closest('.bx-wrapper').hover((function() {
          if (isVideo) {
            toggleSlidesControlsOpacity($(slider), 1);
          }
          return $(this).addClass('hover');
        }), function() {
          $(this).removeClass('hover');
          if (isVideo) {
            return toggleSlidesControlsOpacity($(slider), 0);
          }
        });
      });
    };
    initUtilities = function() {
      $('[data-target=new-window]').attr('target', '_blank');
      return $('form').attr('novalidate', '');
    };
    onAjaxError = function(XMLHttpRequest, textStatus, showError, message) {
      var response, responseMessage;
      response = $.parseJSON(XMLHttpRequest.responseText);
      responseMessage = response.message + ': ' + response.description;
      message || (message = responseMessage);
      inform.warn(textStatus);
      inform.debug(response);
      if (showError) {
        return notify.error(message);
      }
    };
    positionSlidesControls = function(slider, $slideElement) {
      if ($slideElement.hasClass('video')) {
        toggleSlidesControlsOpacity($(slider), 0);
        $(slider).closest('.bx-wrapper').addClass('slide-controls-top');
        return true;
      } else {
        toggleSlidesControlsOpacity($(slider), 1);
        $(slider).closest('.bx-wrapper').removeClass('slide-controls-top');
        return false;
      }
    };
    toggleSlidesControlsOpacity = function($slides, opacity) {
      var $bxWrapper;
      $bxWrapper = $slides.closest('.bx-wrapper');
      if (!$bxWrapper.hasClass('hover')) {
        return $bxWrapper.find('.bx-controls').css('opacity', opacity);
      }
    };
    $(document).foundation();
    $(document).ready(function() {
      initCart();
      initFancybox();
      initFitVids();
      initMobileNav();
      initParsley();
      initSlides();
      return initUtilities();
    });
    return {
      onAjaxError: onAjaxError
    };
  })(jQuery.noConflict());

}).call(this);
